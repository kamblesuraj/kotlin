
RAW_FIR:
FILE: nestedClassWithPropertiesOverrides.kt
    public? final? [ResolvedTo(RAW_FIR)] interface OV : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] val originalExpressions: A
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=OV] get(): A

        public? final? [ResolvedTo(RAW_FIR)] class ResolveMe : OV {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ResolveMe] constructor(): R|OV.ResolveMe| {
                LAZY_super<<implicit>>
            }

            public? open? override [ResolvedTo(RAW_FIR)] val originalExpressions: A
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ResolveMe] get(): A

        }

    }
    public? final? [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<R|kotlin/Any|>
        }

    }

IMPORTS:
FILE: nestedClassWithPropertiesOverrides.kt
    public? final? [ResolvedTo(RAW_FIR)] interface OV : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] val originalExpressions: A
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=OV] get(): A

        public? final? [ResolvedTo(RAW_FIR)] class ResolveMe : OV {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ResolveMe] constructor(): R|OV.ResolveMe| {
                LAZY_super<<implicit>>
            }

            public? open? override [ResolvedTo(RAW_FIR)] val originalExpressions: A
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ResolveMe] get(): A

        }

    }
    public? final? [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<R|kotlin/Any|>
        }

    }

COMPILER_REQUIRED_ANNOTATIONS:
FILE: nestedClassWithPropertiesOverrides.kt
    public? final? [ResolvedTo(RAW_FIR)] interface OV : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] val originalExpressions: A
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=OV] get(): A

        public? final? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] class ResolveMe : OV {
            public? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] [ContainingClassKey=ResolveMe] constructor(): R|OV.ResolveMe| {
                LAZY_super<<implicit>>
            }

            public? open? override [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] val originalExpressions: A
                public? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] [ContainingClassKey=ResolveMe] get(): A

        }

    }
    public? final? [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<R|kotlin/Any|>
        }

    }

COMPANION_GENERATION:
FILE: nestedClassWithPropertiesOverrides.kt
    public? final? [ResolvedTo(RAW_FIR)] interface OV : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] val originalExpressions: A
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=OV] get(): A

        public? final? [ResolvedTo(COMPANION_GENERATION)] class ResolveMe : OV {
            public? [ResolvedTo(COMPANION_GENERATION)] [ContainingClassKey=ResolveMe] constructor(): R|OV.ResolveMe| {
                LAZY_super<<implicit>>
            }

            public? open? override [ResolvedTo(COMPANION_GENERATION)] val originalExpressions: A
                public? [ResolvedTo(COMPANION_GENERATION)] [ContainingClassKey=ResolveMe] get(): A

        }

    }
    public? final? [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<R|kotlin/Any|>
        }

    }

SUPER_TYPES:
FILE: nestedClassWithPropertiesOverrides.kt
    public? final? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] interface OV : R|kotlin/Any| {
        public? final? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] val originalExpressions: A
            public? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] [ContainingClassKey=OV] get(): A

        public? final? [ResolvedTo(SUPER_TYPES)] class ResolveMe : R|OV| {
            public? [ResolvedTo(SUPER_TYPES)] [ContainingClassKey=ResolveMe] constructor(): R|OV.ResolveMe| {
                LAZY_super<<implicit>>
            }

            public? open? override [ResolvedTo(SUPER_TYPES)] val originalExpressions: A
                public? [ResolvedTo(SUPER_TYPES)] [ContainingClassKey=ResolveMe] get(): A

        }

    }
    public? final? [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<R|kotlin/Any|>
        }

    }

TYPES:
FILE: nestedClassWithPropertiesOverrides.kt
    public? final? [ResolvedTo(SUPER_TYPES)] interface OV : R|kotlin/Any| {
        public? final? [ResolvedTo(SUPER_TYPES)] val originalExpressions: A
            public? [ResolvedTo(SUPER_TYPES)] [ContainingClassKey=OV] get(): A

        public? final? [ResolvedTo(TYPES)] class ResolveMe : R|OV| {
            public? [ResolvedTo(TYPES)] [ContainingClassKey=ResolveMe] constructor(): R|OV.ResolveMe| {
                LAZY_super<<implicit>>
            }

            public? open? override [ResolvedTo(TYPES)] val originalExpressions: R|A|
                public? [ResolvedTo(TYPES)] [ContainingClassKey=ResolveMe] get(): R|A|

        }

    }
    public? final? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] class A : R|kotlin/Any| {
        public? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<R|kotlin/Any|>
        }

    }

STATUS:
FILE: nestedClassWithPropertiesOverrides.kt
    public abstract [ResolvedTo(SUPER_TYPES)] interface OV : R|kotlin/Any| {
        public abstract [ResolvedTo(TYPES)] val originalExpressions: R|A|
            public [ResolvedTo(TYPES)] [ContainingClassKey=OV] get(): R|A|

        public final [ResolvedTo(STATUS)] class ResolveMe : R|OV| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=ResolveMe] constructor(): R|OV.ResolveMe| {
                LAZY_super<<implicit>>
            }

            public open override [ResolvedTo(STATUS)] val originalExpressions: R|A|
                public [ResolvedTo(STATUS)] [ContainingClassKey=ResolveMe] get(): R|A|

        }

    }
    public? final? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] class A : R|kotlin/Any| {
        public? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<R|kotlin/Any|>
        }

    }

ARGUMENTS_OF_ANNOTATIONS:
FILE: nestedClassWithPropertiesOverrides.kt
    public abstract [ResolvedTo(STATUS)] interface OV : R|kotlin/Any| {
        public abstract [ResolvedTo(STATUS)] val originalExpressions: R|A|
            public [ResolvedTo(STATUS)] [ContainingClassKey=OV] get(): R|A|

        public final [ResolvedTo(ARGUMENTS_OF_ANNOTATIONS)] class ResolveMe : R|OV| {
            public [ResolvedTo(ARGUMENTS_OF_ANNOTATIONS)] [ContainingClassKey=ResolveMe] constructor(): R|OV.ResolveMe| {
                LAZY_super<<implicit>>
            }

            public open override [ResolvedTo(ARGUMENTS_OF_ANNOTATIONS)] val originalExpressions: R|A|
                public [ResolvedTo(ARGUMENTS_OF_ANNOTATIONS)] [ContainingClassKey=ResolveMe] get(): R|A|

        }

    }
    public? final? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] class A : R|kotlin/Any| {
        public? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<R|kotlin/Any|>
        }

    }

CONTRACTS:
FILE: nestedClassWithPropertiesOverrides.kt
    public abstract [ResolvedTo(STATUS)] interface OV : R|kotlin/Any| {
        public abstract [ResolvedTo(STATUS)] val originalExpressions: R|A|
            public [ResolvedTo(STATUS)] [ContainingClassKey=OV] get(): R|A|

        public final [ResolvedTo(CONTRACTS)] class ResolveMe : R|OV| {
            public [ResolvedTo(CONTRACTS)] [ContainingClassKey=ResolveMe] constructor(): R|OV.ResolveMe| {
                LAZY_super<<implicit>>
            }

            public open override [ResolvedTo(CONTRACTS)] val originalExpressions: R|A|
                public [ResolvedTo(CONTRACTS)] [ContainingClassKey=ResolveMe] get(): R|A|

        }

    }
    public? final? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] class A : R|kotlin/Any| {
        public? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<R|kotlin/Any|>
        }

    }

IMPLICIT_TYPES_BODY_RESOLVE:
FILE: nestedClassWithPropertiesOverrides.kt
    public abstract [ResolvedTo(STATUS)] interface OV : R|kotlin/Any| {
        public abstract [ResolvedTo(STATUS)] val originalExpressions: R|A|
            public [ResolvedTo(STATUS)] [ContainingClassKey=OV] get(): R|A|

        public final [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] class ResolveMe : R|OV| {
            public [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] [ContainingClassKey=ResolveMe] constructor(): R|OV.ResolveMe| {
                LAZY_super<<implicit>>
            }

            public open override [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] val originalExpressions: R|A|
                public [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] [ContainingClassKey=ResolveMe] get(): R|A|

        }

    }
    public? final? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] class A : R|kotlin/Any| {
        public? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<R|kotlin/Any|>
        }

    }

ANNOTATIONS_ARGUMENTS_MAPPING:
FILE: nestedClassWithPropertiesOverrides.kt
    public abstract [ResolvedTo(STATUS)] interface OV : R|kotlin/Any| {
        public abstract [ResolvedTo(STATUS)] val originalExpressions: R|A|
            public [ResolvedTo(STATUS)] [ContainingClassKey=OV] get(): R|A|

        public final [ResolvedTo(ANNOTATIONS_ARGUMENTS_MAPPING)] class ResolveMe : R|OV| {
            public [ResolvedTo(ANNOTATIONS_ARGUMENTS_MAPPING)] [ContainingClassKey=ResolveMe] constructor(): R|OV.ResolveMe| {
                LAZY_super<<implicit>>
            }

            public open override [ResolvedTo(ANNOTATIONS_ARGUMENTS_MAPPING)] val originalExpressions: R|A|
                public [ResolvedTo(ANNOTATIONS_ARGUMENTS_MAPPING)] [ContainingClassKey=ResolveMe] get(): R|A|

        }

    }
    public? final? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] class A : R|kotlin/Any| {
        public? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<R|kotlin/Any|>
        }

    }

EXPECT_ACTUAL_MATCHING:
FILE: nestedClassWithPropertiesOverrides.kt
    public abstract [ResolvedTo(STATUS)] interface OV : R|kotlin/Any| {
        public abstract [ResolvedTo(STATUS)] val originalExpressions: R|A|
            public [ResolvedTo(STATUS)] [ContainingClassKey=OV] get(): R|A|

        public final [ResolvedTo(EXPECT_ACTUAL_MATCHING)] class ResolveMe : R|OV| {
            public [ResolvedTo(EXPECT_ACTUAL_MATCHING)] [ContainingClassKey=ResolveMe] constructor(): R|OV.ResolveMe| {
                LAZY_super<<implicit>>
            }

            public open override [ResolvedTo(EXPECT_ACTUAL_MATCHING)] val originalExpressions: R|A|
                public [ResolvedTo(EXPECT_ACTUAL_MATCHING)] [ContainingClassKey=ResolveMe] get(): R|A|

        }

    }
    public? final? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] class A : R|kotlin/Any| {
        public? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<R|kotlin/Any|>
        }

    }

BODY_RESOLVE:
FILE: nestedClassWithPropertiesOverrides.kt
    public abstract [ResolvedTo(STATUS)] interface OV : R|kotlin/Any| {
        public abstract [ResolvedTo(STATUS)] val originalExpressions: R|A|
            public [ResolvedTo(STATUS)] [ContainingClassKey=OV] get(): R|A|

        public final [ResolvedTo(BODY_RESOLVE)] class ResolveMe : R|OV| {
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=ResolveMe] constructor(): R|OV.ResolveMe| {
                super<R|kotlin/Any|>()
            }

            public open override [ResolvedTo(BODY_RESOLVE)] val originalExpressions: R|A|
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=ResolveMe] get(): R|A|

        }

    }
    public? final? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] class A : R|kotlin/Any| {
        public? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<R|kotlin/Any|>
        }

    }

FILE RAW TO BODY:
FILE: nestedClassWithPropertiesOverrides.kt
    public abstract [ResolvedTo(BODY_RESOLVE)] interface OV : R|kotlin/Any| {
        public abstract [ResolvedTo(BODY_RESOLVE)] val originalExpressions: R|A|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=OV] get(): R|A|

        public final [ResolvedTo(BODY_RESOLVE)] class ResolveMe : R|OV| {
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=ResolveMe] constructor(): R|OV.ResolveMe| {
                super<R|kotlin/Any|>()
            }

            public open override [ResolvedTo(BODY_RESOLVE)] val originalExpressions: R|A|
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=ResolveMe] get(): R|A|

        }

    }
    public final [ResolvedTo(BODY_RESOLVE)] class A : R|kotlin/Any| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=A] constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

    }
