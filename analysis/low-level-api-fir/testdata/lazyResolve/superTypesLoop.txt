
RAW_FIR:
FILE: superTypesLoop.kt
    public? open [ResolvedTo(RAW_FIR)] class resolveMe : C {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=resolveMe] constructor(): R|resolveMe| {
            LAZY_super<C>
        }

    }
    public? open [ResolvedTo(RAW_FIR)] class A : B {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<B>
        }

    }
    public? open [ResolvedTo(RAW_FIR)] class B : C {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] constructor(): R|B| {
            LAZY_super<C>
        }

    }
    public? open [ResolvedTo(RAW_FIR)] class C : A {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] constructor(): R|C| {
            LAZY_super<A>
        }

    }

IMPORTS:
FILE: superTypesLoop.kt
    public? open [ResolvedTo(RAW_FIR)] class resolveMe : C {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=resolveMe] constructor(): R|resolveMe| {
            LAZY_super<C>
        }

    }
    public? open [ResolvedTo(RAW_FIR)] class A : B {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<B>
        }

    }
    public? open [ResolvedTo(RAW_FIR)] class B : C {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] constructor(): R|B| {
            LAZY_super<C>
        }

    }
    public? open [ResolvedTo(RAW_FIR)] class C : A {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] constructor(): R|C| {
            LAZY_super<A>
        }

    }

COMPILER_REQUIRED_ANNOTATIONS:
FILE: superTypesLoop.kt
    public? open [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] class resolveMe : C {
        public? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] [ContainingClassKey=resolveMe] constructor(): R|resolveMe| {
            LAZY_super<C>
        }

    }
    public? open [ResolvedTo(RAW_FIR)] class A : B {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<B>
        }

    }
    public? open [ResolvedTo(RAW_FIR)] class B : C {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] constructor(): R|B| {
            LAZY_super<C>
        }

    }
    public? open [ResolvedTo(RAW_FIR)] class C : A {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] constructor(): R|C| {
            LAZY_super<A>
        }

    }

COMPANION_GENERATION:
FILE: superTypesLoop.kt
    public? open [ResolvedTo(COMPANION_GENERATION)] class resolveMe : C {
        public? [ResolvedTo(COMPANION_GENERATION)] [ContainingClassKey=resolveMe] constructor(): R|resolveMe| {
            LAZY_super<C>
        }

    }
    public? open [ResolvedTo(RAW_FIR)] class A : B {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<B>
        }

    }
    public? open [ResolvedTo(RAW_FIR)] class B : C {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] constructor(): R|B| {
            LAZY_super<C>
        }

    }
    public? open [ResolvedTo(RAW_FIR)] class C : A {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] constructor(): R|C| {
            LAZY_super<A>
        }

    }

SUPER_TYPES:
FILE: superTypesLoop.kt
    public? open [ResolvedTo(SUPER_TYPES)] class resolveMe : R|C| {
        public? [ResolvedTo(SUPER_TYPES)] [ContainingClassKey=resolveMe] constructor(): R|resolveMe| {
            LAZY_super<C>
        }

    }
    public? open [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] class A : <ERROR TYPE REF: Loop in supertype: /A -> /B> {
        public? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<B>
        }

    }
    public? open [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] class B : <ERROR TYPE REF: Loop in supertype: /B -> /C> {
        public? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] [ContainingClassKey=B] constructor(): R|B| {
            LAZY_super<C>
        }

    }
    public? open [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] class C : <ERROR TYPE REF: Loop in supertype: /C -> /A> {
        public? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] [ContainingClassKey=C] constructor(): R|C| {
            LAZY_super<A>
        }

    }

TYPES:
FILE: superTypesLoop.kt
    public? open [ResolvedTo(TYPES)] class resolveMe : R|C| {
        public? [ResolvedTo(TYPES)] [ContainingClassKey=resolveMe] constructor(): R|resolveMe| {
            LAZY_super<R|C|>
        }

    }
    public? open [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] class A : <ERROR TYPE REF: Loop in supertype: /A -> /B> {
        public? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<B>
        }

    }
    public? open [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] class B : <ERROR TYPE REF: Loop in supertype: /B -> /C> {
        public? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] [ContainingClassKey=B] constructor(): R|B| {
            LAZY_super<C>
        }

    }
    public? open [ResolvedTo(SUPER_TYPES)] class C : <ERROR TYPE REF: Loop in supertype: /C -> /A> {
        public? [ResolvedTo(SUPER_TYPES)] [ContainingClassKey=C] constructor(): R|C| {
            LAZY_super<A>
        }

    }

STATUS:
FILE: superTypesLoop.kt
    public open [ResolvedTo(STATUS)] class resolveMe : R|C| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=resolveMe] constructor(): R|resolveMe| {
            LAZY_super<R|C|>
        }

    }
    public? open [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] class A : <ERROR TYPE REF: Loop in supertype: /A -> /B> {
        public? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<B>
        }

    }
    public? open [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] class B : <ERROR TYPE REF: Loop in supertype: /B -> /C> {
        public? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] [ContainingClassKey=B] constructor(): R|B| {
            LAZY_super<C>
        }

    }
    public open [ResolvedTo(TYPES)] class C : <ERROR TYPE REF: Loop in supertype: /C -> /A> {
        public [ResolvedTo(TYPES)] [ContainingClassKey=C] constructor(): R|C| {
            LAZY_super<R|A|>
        }

    }

ARGUMENTS_OF_ANNOTATIONS:
FILE: superTypesLoop.kt
    public open [ResolvedTo(ARGUMENTS_OF_ANNOTATIONS)] class resolveMe : R|C| {
        public [ResolvedTo(ARGUMENTS_OF_ANNOTATIONS)] [ContainingClassKey=resolveMe] constructor(): R|resolveMe| {
            LAZY_super<R|C|>
        }

    }
    public? open [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] class A : <ERROR TYPE REF: Loop in supertype: /A -> /B> {
        public? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<B>
        }

    }
    public? open [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] class B : <ERROR TYPE REF: Loop in supertype: /B -> /C> {
        public? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] [ContainingClassKey=B] constructor(): R|B| {
            LAZY_super<C>
        }

    }
    public open [ResolvedTo(TYPES)] class C : <ERROR TYPE REF: Loop in supertype: /C -> /A> {
        public [ResolvedTo(TYPES)] [ContainingClassKey=C] constructor(): R|C| {
            LAZY_super<R|A|>
        }

    }

CONTRACTS:
FILE: superTypesLoop.kt
    public open [ResolvedTo(CONTRACTS)] class resolveMe : R|C| {
        public [ResolvedTo(CONTRACTS)] [ContainingClassKey=resolveMe] constructor(): R|resolveMe| {
            LAZY_super<R|C|>
        }

    }
    public? open [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] class A : <ERROR TYPE REF: Loop in supertype: /A -> /B> {
        public? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<B>
        }

    }
    public? open [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] class B : <ERROR TYPE REF: Loop in supertype: /B -> /C> {
        public? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] [ContainingClassKey=B] constructor(): R|B| {
            LAZY_super<C>
        }

    }
    public open [ResolvedTo(TYPES)] class C : <ERROR TYPE REF: Loop in supertype: /C -> /A> {
        public [ResolvedTo(TYPES)] [ContainingClassKey=C] constructor(): R|C| {
            LAZY_super<R|A|>
        }

    }

IMPLICIT_TYPES_BODY_RESOLVE:
FILE: superTypesLoop.kt
    public open [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] class resolveMe : R|C| {
        public [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] [ContainingClassKey=resolveMe] constructor(): R|resolveMe| {
            LAZY_super<R|C|>
        }

    }
    public? open [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] class A : <ERROR TYPE REF: Loop in supertype: /A -> /B> {
        public? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<B>
        }

    }
    public? open [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] class B : <ERROR TYPE REF: Loop in supertype: /B -> /C> {
        public? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] [ContainingClassKey=B] constructor(): R|B| {
            LAZY_super<C>
        }

    }
    public open [ResolvedTo(TYPES)] class C : <ERROR TYPE REF: Loop in supertype: /C -> /A> {
        public [ResolvedTo(TYPES)] [ContainingClassKey=C] constructor(): R|C| {
            LAZY_super<R|A|>
        }

    }

ANNOTATIONS_ARGUMENTS_MAPPING:
FILE: superTypesLoop.kt
    public open [ResolvedTo(ANNOTATIONS_ARGUMENTS_MAPPING)] class resolveMe : R|C| {
        public [ResolvedTo(ANNOTATIONS_ARGUMENTS_MAPPING)] [ContainingClassKey=resolveMe] constructor(): R|resolveMe| {
            LAZY_super<R|C|>
        }

    }
    public? open [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] class A : <ERROR TYPE REF: Loop in supertype: /A -> /B> {
        public? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<B>
        }

    }
    public? open [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] class B : <ERROR TYPE REF: Loop in supertype: /B -> /C> {
        public? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] [ContainingClassKey=B] constructor(): R|B| {
            LAZY_super<C>
        }

    }
    public open [ResolvedTo(TYPES)] class C : <ERROR TYPE REF: Loop in supertype: /C -> /A> {
        public [ResolvedTo(TYPES)] [ContainingClassKey=C] constructor(): R|C| {
            LAZY_super<R|A|>
        }

    }

EXPECT_ACTUAL_MATCHING:
FILE: superTypesLoop.kt
    public open [ResolvedTo(EXPECT_ACTUAL_MATCHING)] class resolveMe : R|C| {
        public [ResolvedTo(EXPECT_ACTUAL_MATCHING)] [ContainingClassKey=resolveMe] constructor(): R|resolveMe| {
            LAZY_super<R|C|>
        }

    }
    public? open [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] class A : <ERROR TYPE REF: Loop in supertype: /A -> /B> {
        public? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<B>
        }

    }
    public? open [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] class B : <ERROR TYPE REF: Loop in supertype: /B -> /C> {
        public? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] [ContainingClassKey=B] constructor(): R|B| {
            LAZY_super<C>
        }

    }
    public open [ResolvedTo(TYPES)] class C : <ERROR TYPE REF: Loop in supertype: /C -> /A> {
        public [ResolvedTo(TYPES)] [ContainingClassKey=C] constructor(): R|C| {
            LAZY_super<R|A|>
        }

    }

BODY_RESOLVE:
FILE: superTypesLoop.kt
    public open [ResolvedTo(BODY_RESOLVE)] class resolveMe : R|C| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=resolveMe] constructor(): R|resolveMe| {
            super<R|C|>()
        }

    }
    public? open [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] class A : <ERROR TYPE REF: Loop in supertype: /A -> /B> {
        public? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<B>
        }

    }
    public? open [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] class B : <ERROR TYPE REF: Loop in supertype: /B -> /C> {
        public? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] [ContainingClassKey=B] constructor(): R|B| {
            LAZY_super<C>
        }

    }
    public open [ResolvedTo(STATUS)] class C : <ERROR TYPE REF: Loop in supertype: /C -> /A> {
        public [ResolvedTo(STATUS)] [ContainingClassKey=C] constructor(): R|C| {
            LAZY_super<R|A|>
        }

    }

FILE RAW TO BODY:
FILE: superTypesLoop.kt
    public open [ResolvedTo(BODY_RESOLVE)] class resolveMe : R|C| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=resolveMe] constructor(): R|resolveMe| {
            super<R|C|>()
        }

    }
    public open [ResolvedTo(BODY_RESOLVE)] class A : <ERROR TYPE REF: Loop in supertype: /A -> /B> {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=A] constructor(): R|A| {
            super<R|B|>()
        }

    }
    public open [ResolvedTo(BODY_RESOLVE)] class B : <ERROR TYPE REF: Loop in supertype: /B -> /C> {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=B] constructor(): R|B| {
            super<R|C|>()
        }

    }
    public open [ResolvedTo(BODY_RESOLVE)] class C : <ERROR TYPE REF: Loop in supertype: /C -> /A> {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=C] constructor(): R|C| {
            super<R|A|>()
        }

    }
