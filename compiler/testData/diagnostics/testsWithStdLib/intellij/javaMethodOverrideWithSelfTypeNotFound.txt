package

public abstract class Breakpoint</*0*/ P : kotlin.Any!> {
    public constructor Breakpoint</*0*/ P : kotlin.Any!>()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public interface JavaBreakpointType</*0*/ P : kotlin.Any!> {
    @org.jetbrains.annotations.NotNull public abstract fun createJavaBreakpoint(/*0*/ breakpoint: Breakpoint<P!>!): Breakpoint<P!>
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public abstract class JavaLineBreakpointTypeBase</*0*/ P : kotlin.Any!> : JavaBreakpointType<P!> {
    public constructor JavaLineBreakpointTypeBase</*0*/ P : kotlin.Any!>()
    @org.jetbrains.annotations.NotNull public abstract override /*1*/ /*fake_override*/ fun createJavaBreakpoint(/*0*/ breakpoint: Breakpoint<P!>!): Breakpoint<P!>
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public open class JavaMethodBreakpointProperties {
    public constructor JavaMethodBreakpointProperties()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public open class JavaMethodBreakpointType : JavaLineBreakpointTypeBase<JavaMethodBreakpointProperties!> {
    public constructor JavaMethodBreakpointType()
    @org.jetbrains.annotations.NotNull @java.lang.Override public open fun createJavaBreakpoint(/*0*/ breakpoint: Breakpoint<(raw) kotlin.Any!>!): Breakpoint<JavaMethodBreakpointProperties!>
    @org.jetbrains.annotations.NotNull public abstract override /*1*/ /*fake_override*/ fun createJavaBreakpoint(/*0*/ breakpoint: Breakpoint<JavaMethodBreakpointProperties!>!): Breakpoint<JavaMethodBreakpointProperties!>
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final class KotlinFunctionBreakpointType : JavaMethodBreakpointType {
    public constructor KotlinFunctionBreakpointType()
    @org.jetbrains.annotations.NotNull @java.lang.Override public open override /*1*/ /*fake_override*/ fun createJavaBreakpoint(/*0*/ breakpoint: Breakpoint<(raw) kotlin.Any!>!): Breakpoint<JavaMethodBreakpointProperties!>
    public open override /*1*/ fun createJavaBreakpoint(/*0*/ breakpoint: Breakpoint<JavaMethodBreakpointProperties>): MethodBreakpoint
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public open class MethodBreakpoint : Breakpoint<JavaMethodBreakpointProperties!> {
    public constructor MethodBreakpoint()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

