FILE: test.kt
    package a

    public final class Foo : R|kotlin/Any| {
        public constructor(@R|a/NoTarget|() @R|a/PropValueField|() @R|a/ParameterOnly|() param: R|kotlin/Int|): R|a/Foo| {
            super<R|kotlin/Any|>()
        }

        @R|a/FieldOnly|() public final var param: R|kotlin/Int| = R|<local>/param|
            public get(): R|kotlin/Int|
            public set(value: R|kotlin/Int|): R|kotlin/Unit|

    }
    public final fun box(): R|kotlin/String| {
        lval clazz: R|kotlin/reflect/KClass<a/Foo>| = <getClass>(Q|a/Foo|)
        lval parameterAnnotations: R|kotlin/String| = R|<local>/clazz|.R|SubstitutionOverride<kotlin/reflect/KClass.constructors: R|kotlin/collections/Collection<kotlin/reflect/KFunction<a/Foo>>|>|.R|kotlin/collections/single|<R|kotlin/reflect/KFunction<a/Foo>|>().R|SubstitutionOverride<kotlin/reflect/KFunction.parameters: R|kotlin/collections/List<kotlin/reflect/KParameter>|>|.R|kotlin/collections/single|<R|kotlin/reflect/KParameter|>().R|kotlin/reflect/KAnnotatedElement.annotations|.R|kotlin/collections/joinToString|<R|kotlin/Annotation|>()
        lval fieldAnnotations: R|kotlin/String| = <getClass>(Q|a/Foo|).R|kotlin/jvm/java|<R|a/Foo|>.R|SubstitutionOverride<java/lang/Class.getDeclaredField: R|java/lang/reflect/Field!|>|(String(param)).R|java/lang/reflect/AccessibleObject.annotations|.R|kotlin/collections/joinToString|<R|kotlin/Annotation!|>()
        when () {
            !=(R|<local>/parameterAnnotations|, String(@a.NoTarget(), @a.PropValueField(), @a.ParameterOnly())) ->  {
                ^box String(Parameters:).R|kotlin/String.plus|(R|<local>/parameterAnnotations|)
            }
        }

        when () {
            !=(R|<local>/fieldAnnotations|, String(@a.FieldOnly())) ->  {
                ^box String(Field:).R|kotlin/String.plus|(R|<local>/fieldAnnotations|)
            }
        }

        ^box String(OK)
    }
