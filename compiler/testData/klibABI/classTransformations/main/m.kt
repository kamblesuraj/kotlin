import abitestutils.TestMode.NATIVE_CACHE_STATIC_EVERYWHERE
import abitestutils.abiTest

fun box() = abiTest {
    /**
     * `fun foo(): A.B`: In older version of the library `A` and `B` were classes. In newer version `B` is an entry of enum `A`.
     *
     * When no lazy IR is used, [IrCall.symbol.owner] is a function (most likely [IrFunctionImpl]) which has the stub [IrClass] (the one
     * generated by [MissingDeclarationStubGenerator]) with "/A.B|null[0]" signature in the return type. So the function is formally
     * detected as "referecing an unbound CLASS symbol" and the appropriate error message is constructed.
     *
     * When lazy IR is used, [IrCall.symbol.owner] is a lazy-IR function with the return type holding the lazy-IR class
     * generated from [EnumEntrySyntheticClassDescriptor] for the enum entry and having a different signature: "/A.B.<EEC>|null[0]".
     * This class is not detected as unbound, and the whole function is not considered as partially linked. But the [IrCall]
     * still has its own expression type recorded that is deserialized without lazy-IR-distortion, so the [IrCall] expression
     * is detected as "using an unbound CLASS symbol" with "/A.B|null[0]" signature.
     *
     * The [adjustForLazyIr] function is used to adjust tested error messages depending on whether lazy IR is used or not.
     */
    fun adjustForLazyIr(declaration: String) = if (testMode == NATIVE_CACHE_STATIC_EVERYWHERE) "IR expression" else declaration

    expectFailure(skipHashes("Can not get instance of singleton Foo: No enum entry found for symbol /EnumToClass.Foo")) { getEnumToClassFoo() }
    expectFailure(skipHashes("Can not get instance of singleton Foo: No enum entry found for symbol /EnumToClass.Foo")) { getEnumToClassFooInline() }
    expectFailure(skipHashes("Can not get instance of singleton Foo: No enum entry found for symbol /EnumToClass.Foo")) { getEnumToClassFooAsAny() }
    expectFailure(skipHashes("Can not get instance of singleton Foo: No enum entry found for symbol /EnumToClass.Foo")) { getEnumToClassFooAsAnyInline() }
    expectFailure(skipHashes("Can not get instance of singleton Bar: No enum entry found for symbol /EnumToClass.Bar")) { getEnumToClassBar() }
    expectFailure(skipHashes("Can not get instance of singleton Bar: No enum entry found for symbol /EnumToClass.Bar")) { getEnumToClassBarInline() }
    expectFailure(skipHashes("Can not get instance of singleton Bar: No enum entry found for symbol /EnumToClass.Bar")) { getEnumToClassBarAsAny() }
    expectFailure(skipHashes("Can not get instance of singleton Bar: No enum entry found for symbol /EnumToClass.Bar")) { getEnumToClassBarAsAnyInline() }
    expectFailure(skipHashes("Function getObjectToEnumFoo can not be called: ${adjustForLazyIr("Function getObjectToEnumFoo")} uses unlinked class symbol /ObjectToEnum.Foo")) { getObjectToEnumFoo() }
    expectFailure(skipHashes("Function getObjectToEnumFooInline can not be called: ${adjustForLazyIr("Function getObjectToEnumFooInline")} uses unlinked class symbol /ObjectToEnum.Foo")) { getObjectToEnumFooInline() }
    expectFailure(skipHashes("Constructor Foo.<init> can not be called: No constructor found for symbol /ObjectToEnum.Foo.<init>")) { getObjectToEnumFooAsAny() }
    expectFailure(skipHashes("Constructor Foo.<init> can not be called: No constructor found for symbol /ObjectToEnum.Foo.<init>")) { getObjectToEnumFooAsAnyInline() }
    expectFailure(skipHashes("Function getObjectToEnumBar can not be called: ${adjustForLazyIr("Function getObjectToEnumBar")} uses unlinked class symbol /ObjectToEnum.Bar")) { getObjectToEnumBar() }
    expectFailure(skipHashes("Function getObjectToEnumBarInline can not be called: ${adjustForLazyIr("Function getObjectToEnumBarInline")} uses unlinked class symbol /ObjectToEnum.Bar")) { getObjectToEnumBarInline() }
    expectFailure(skipHashes("Can not get instance of singleton Bar: No class found for symbol /ObjectToEnum.Bar")) { getObjectToEnumBarAsAny() }
    expectFailure(skipHashes("Can not get instance of singleton Bar: No class found for symbol /ObjectToEnum.Bar")) { getObjectToEnumBarAsAnyInline() }
    expectFailure(skipHashes("Function getClassToEnumFoo can not be called: ${adjustForLazyIr("Function getClassToEnumFoo")} uses unlinked class symbol /ClassToEnum.Foo")) { getClassToEnumFoo() }
    expectFailure(skipHashes("Function getClassToEnumFooInline can not be called: ${adjustForLazyIr("Function getClassToEnumFooInline")} uses unlinked class symbol /ClassToEnum.Foo")) { getClassToEnumFooInline() }
    expectFailure(skipHashes("Constructor Foo.<init> can not be called: No constructor found for symbol /ClassToEnum.Foo.<init>")) { getClassToEnumFooAsAny() }
    expectFailure(skipHashes("Constructor Foo.<init> can not be called: No constructor found for symbol /ClassToEnum.Foo.<init>")) { getClassToEnumFooAsAnyInline() }
    expectFailure(skipHashes("Function getClassToEnumBar can not be called: ${adjustForLazyIr("Function getClassToEnumBar")} uses unlinked class symbol /ClassToEnum.Bar")) { getClassToEnumBar() }
    expectFailure(skipHashes("Function getClassToEnumBarInline can not be called: ${adjustForLazyIr("Function getClassToEnumBarInline")} uses unlinked class symbol /ClassToEnum.Bar")) { getClassToEnumBarInline() }
    expectFailure(skipHashes("Can not get instance of singleton Bar: No class found for symbol /ClassToEnum.Bar")) { getClassToEnumBarAsAny() }
    expectFailure(skipHashes("Can not get instance of singleton Bar: No class found for symbol /ClassToEnum.Bar")) { getClassToEnumBarAsAnyInline() }
    expectFailure(skipHashes("Function getClassToEnumBaz can not be called: ${adjustForLazyIr("Function getClassToEnumBaz")} uses unlinked class symbol /ClassToEnum.Baz")) { getClassToEnumBaz() }
    expectFailure(skipHashes("Function getClassToEnumBazInline can not be called: ${adjustForLazyIr("Function getClassToEnumBazInline")} uses unlinked class symbol /ClassToEnum.Baz")) { getClassToEnumBazInline() }
    expectFailure(skipHashes("Constructor ClassToEnum.<init> can not be called: ClassToEnum is enum class while regular class is expected")) { getClassToEnumBazAsAny() }
    expectFailure(skipHashes("Constructor ClassToEnum.<init> can not be called: ClassToEnum is enum class while regular class is expected")) { getClassToEnumBazAsAnyInline() }
    expectFailure(skipHashes("Constructor ClassToObject.<init> can not be called: ClassToObject is object while regular class is expected")) { getClassToObject() }
    expectFailure(skipHashes("Constructor ClassToObject.<init> can not be called: ClassToObject is object while regular class is expected")) { getClassToObjectInline() }
    expectFailure(skipHashes("Constructor ClassToObject.<init> can not be called: ClassToObject is object while regular class is expected")) { getClassToObjectAsAny() }
    expectFailure(skipHashes("Constructor ClassToObject.<init> can not be called: ClassToObject is object while regular class is expected")) { getClassToObjectAsAnyInline() }
    expectFailure(skipHashes("Can not get instance of singleton ObjectToClass: ObjectToClass is class while object is expected")) { getObjectToClass() }
    expectFailure(skipHashes("Can not get instance of singleton ObjectToClass: ObjectToClass is class while object is expected")) { getObjectToClassInline() }
    expectFailure(skipHashes("Can not get instance of singleton ObjectToClass: ObjectToClass is class while object is expected")) { getObjectToClassAsAny() }
    expectFailure(skipHashes("Can not get instance of singleton ObjectToClass: ObjectToClass is class while object is expected")) { getObjectToClassAsAnyInline() }
}
